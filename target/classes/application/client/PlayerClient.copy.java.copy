package application.client;

import application.controller.Controller;
import application.server.TTTConstants;
import java.io.*;
import java.net.*;
import javafx.fxml.*;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.*;
import javafx.stage.Modality;
import javafx.stage.Stage;

public class PlayerClient implements TTTConstants {

  private boolean myTurn = false;
  private int myToken = 0;
  private int playerNum = 0;
  private DataInputStream fromServer;
  private DataOutputStream toServer;
  private boolean continueToPlay = true;
  // private boolean waiting = true;
  private String host = "localhost";
  private Stage primaryStage;
  private Controller controller;
  private Scene scene;

  // private boolean isMatched = false;

  public void initPlayer(Stage stage) throws IOException {
    primaryStage = stage;
    FXMLLoader fxmlLoader = new FXMLLoader();
    fxmlLoader.setLocation(
      getClass().getClassLoader().getResource("mainUI.fxml")
    );
    Pane root = fxmlLoader.load();
    scene = new Scene(root);
    controller = (Controller) fxmlLoader.getController();
    primaryStage.setTitle("Tic Tac Toe");
    primaryStage.setScene(scene);
    primaryStage.setResizable(false);
    // primaryStage.show();

    Stage stage1 = new Stage();
    stage1.initModality(Modality.APPLICATION_MODAL);
    Button btn = new Button("结束匹配");
    btn.setOnMouseClicked(event1 -> {
      stage1.close();
      // todo: remove player from pool
    });
    VBox vBox = new VBox();
    vBox.getChildren().addAll(btn);
    vBox.setAlignment(Pos.CENTER);
    Scene scene = new Scene(vBox, 600, 200);
    stage1.setScene(scene);
    stage1.setTitle("匹配中...");
    connectToServer();
    stage1.show();

    while (true) {
      // received 22 as match start sign
      if (fromServer.readInt() == 22) {
        break;
      }
    }
    stage1.close();
    inMatch();
  }

  public void connectToServer() {
    try {
      Socket socket = new Socket(host, 4756);
      fromServer = new DataInputStream(socket.getInputStream());
      toServer = new DataOutputStream(socket.getOutputStream());
    } catch (Exception ex) {
      System.err.println(ex);
    }
  }

  // class HandleMap implements Runnable { // game thread

  // Thread thread;

  // public HandleMap() {
  //   Thread thread = new Thread(this);
  //   thread.start();
  // }

  // public void stop() {
  //   thread = null;
  // }

  public void inMatch() {
    System.out.println("Game set!");
    // 为什么stage上没有东西并且会卡住?
    primaryStage.show();
    try {
      // receive token
      playerNum = fromServer.readInt();
      if (playerNum == PLAY_1) {
        myToken = PLAY_1;
        controller.TURN = true;
        myTurn = true;
      } else if (playerNum == PLAY_2) {
        myToken = PLAY_2;
        controller.TURN = false;
      } else {
        System.out.println("Miss match!");
        return;
      }
      System.out.println("Got my token.");

      // start match
      while (continueToPlay) {
        System.out.print("my token is: ");
        System.out.println(myToken);

        if (myToken == PLAY_1) {
          // waitForPlayerAction();
          primaryStage.setTitle("I'm player1. ");
          sendMove();
          receiveInfoFromServer();
        } else if (myToken == PLAY_2) {
          primaryStage.setTitle("I'm player2. ");
          receiveInfoFromServer();
          // waitForPlayerAction();
          // primaryStage.showAndWait();
          sendMove();
        }
      }
    } catch (Exception ex) {}
  }

  // private void waitForPlayerAction() throws InterruptedException {
  //   while (waiting) {
  //     Thread.sleep(100);
  //     if (!Controller.waiting) {
  //       waiting = false;
  //       Controller.waiting = !Controller.waiting;
  //     }
  //   }
  //   waiting = true;
  // }

  private void sendMove() throws IOException {
    System.out.println("Ready to send movement.");
    controller.game_panel.setOnMouseClicked(e->{
      if (myTurn) {
        int x = (int) (e.getX() / 90);
        int y = (int) (e.getY() / 90);
        if (controller.refreshBoard(x, y)){}else{
          System.err.println("Data not sync!");
        }
        try {
          toServer.writeInt(x);
          toServer.writeInt(y);
        } catch (IOException e1) {
          e1.printStackTrace();
        }
        myTurn = false;
        controller.TURN = false;
      }
    });
    // if (myTurn) {
      
    //   int[] action = Controller.action;
    //   toServer.writeInt(action[0]);
    //   toServer.writeInt(action[1]);
    //   Controller.action[0] = 0;
    //   Controller.action[1] = 0;
    //   myTurn = false;
    //   controller.TURN = false;
    // }
  }

  private void receiveInfoFromServer() throws IOException {
    int status = fromServer.readInt();
    if (status == PLAYER1_WON) {
      continueToPlay = false;
      if (myToken == PLAY_1) {
        primaryStage.setTitle("I won!");
        // primaryStage.show();
      } else if (myToken == PLAY_2) {
        primaryStage.setTitle("Opponent won!");
        receiveMove();
        // primaryStage.show();
      }
    } else if (status == PLAYER2_WON) {
      continueToPlay = false;
      if (myToken == PLAY_2) {
        primaryStage.setTitle("I won!");
        // primaryStage.show();
      } else if (myToken == PLAY_1) {
        primaryStage.setTitle("Opponent won!");
        receiveMove();
        // primaryStage.show();
      }
    } else if (status == DRAW) {
      continueToPlay = false;
      primaryStage.setTitle("Draw match!");
      if (myToken == PLAY_2) receiveMove();
      // primaryStage.show();
    } else {
      if (myTurn) {

      } else {
        receiveMove();
        primaryStage.setTitle("It's my Turn");
        myTurn = true;
        // primaryStage.showAndWait();
      }
    }
  }

  private void receiveMove() throws IOException {
    // Scene.setOnMouseClicked(e->{
    //   int row = fromServer.readInt();
    //   int column = fromServer.readInt();
    //   if (controller.refreshBoard(row, column)) {} else {
    //     System.err.print("Data not sync!");
    //   }
    // });
    int row = fromServer.readInt();
    int column = fromServer.readInt();
    if (controller.refreshBoard(row, column)) {} else {
      System.err.print("Data not sync!");
    }
    // cell[row][column].setToken(otherToken);
    // }
  }
}
